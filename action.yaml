name: Rust tool
description: Build, test and release a Rust tool
inputs:
  tool_name:
    description: Tool name
    type: string
    required: true
  target:
    description: Target triplet
    type: string
    required: true
  target_prefix:
    description: Target file name prefix
    type: string
    required: true
  target_ext:
    description: Target file name extension
    type: string
    required: true
  rename_target:
    description: Optional new name for target file
    type: string
    required: false
    default:
  archive_type:
    description: Archive type
    type: string
    required: true
  build_type:
    description: Build type
    type: string
    required: true
    default: release
  code_sign:
    description: Sign executable (Windows only)
    type: boolean
    required: false
    default: false
runs:
  using: composite
  steps:
    - name: Check out
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Set up environment
      shell: bash
      run: |
        # Path
        echo "${{ github.action_path }}" >> $GITHUB_PATH

        # Variables
        echo "RUST_TOOL_ACTION_BUILD_VERSION=${{ github.ref_name }}-$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo 'ARCHIVE_FILE_NAME=${{ inputs.tool_name }}-${{ github.ref_name }}-${{ inputs.target }}${{ inputs.archive_type }}' >> $GITHUB_ENV
        echo 'CARGO_TERM_COLOR=always' >> $GITHUB_ENV
        echo 'CARGO=cargo' >> $GITHUB_ENV
        echo 'TARGET_ARGS=' >> $GITHUB_ENV
        echo 'OUTPUT_DIR=target' >> $GITHUB_ENV
        if [ '${{ inputs.build_type }}' == 'release' ]; then
          echo 'BUILD_TYPE_ARGS=--release' >> $GITHUB_ENV
        else
          echo 'BUILD_TYPE_ARGS=' >> $GITHUB_ENV
        fi

    - name: Install Cross
      shell: bash
      run: |
        cargo install cross
        echo 'CARGO=cross' >> $GITHUB_ENV
        echo 'TARGET_ARGS=--target ${{ inputs.target }}' >> $GITHUB_ENV
        echo 'OUTPUT_DIR=target/${{ inputs.target }}' >> $GITHUB_ENV

    - name: Set up Rust
      uses: rcook/rust-setup-action@v0.0.0
      with:
        rust-version: stable
        targets: ${{ inputs.target }}

    - name: Build Rust tool
      shell: bash
      run: |
        ${{ env.CARGO }} build ${{ env.BUILD_TYPE_ARGS }} ${{ env.TARGET_ARGS }}

    #- name: Code-sign executable
    #  if: ${{ inputs.code_sign == 'true' }}
    #  shell: bash
    #  run: |
    #    python3 '${{ github.action_path }}/sign.py' sign ${{ env.OUTPUT_DIR }}/${{ inputs.build_type }}/${{ inputs.target_prefix }}${{ inputs.tool_name }}${{ inputs.target_ext }}
    #  env:
    #    RUST_TOOL_ACTION_CODE_SIGN_CRT: ${{ env.RUST_TOOL_ACTION_CODE_SIGN_CRT }}
    #    RUST_TOOL_ACTION_CODE_SIGN_CRTPASS: ${{ env.RUST_TOOL_ACTION_CODE_SIGN_CRTPASS }}

    - name: Create archive
      shell: bash
      run: |
        create-archive \
          '${{ inputs.tool_name }}' \
          '${{ inputs.target_prefix }}' \
          '${{ inputs.target_ext }}' \
          '${{ inputs.rename_target }}' \
          '${{ inputs.archive_type }}' \
          '${{ inputs.build_type }}' \
          '${{ env.OUTPUT_DIR }}' \
          '${{ env.ARCHIVE_FILE_NAME }}' \

    - name: Create checksum
      shell: bash
      run: |
        create-checksum '${{ env.ARCHIVE_FILE_NAME }}'

    - name: Create release
      id: create_release
      uses: joutvhu/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: ${{ inputs.tool_name }} release ${{ github.ref_name }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Upload archive
      uses: actions/upload-release-asset@v1.0.1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_FILE_NAME }}
        asset_name: ${{ env.ARCHIVE_FILE_NAME }}
        asset_content_type: application/octet-stream
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}

    - name: Upload checksum
      uses: actions/upload-release-asset@v1.0.1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ env.ARCHIVE_FILE_NAME }}.sha256sum
        asset_name: ${{ env.ARCHIVE_FILE_NAME }}.sha256sum
        asset_content_type: text/plain
      env:
        GITHUB_TOKEN: ${{ env.GITHUB_TOKEN }}
